/**
 * Clase principal del proyecto para la asignatura Programación
 * Orientada a Objetos, para el curso 2023
 *
 * @author María José Macz López mmaczl@miumg.edu.gt
 */
import java.util.*;
import modelo.persona.empleado.*;
import modelo.persona.cliente.*;
import modelo.pedido.Pedido;
import modelo.mueble.Mueble;
import modelo.mueble.mesa.*;
import modelo.mueble.silla.*;
import modelo.enumerable.*;
import servicio.RegistroEmpleado;
import servicio.RegistroMueble;
import servicio.RegistroPedido;
import servicio.RegistroCliente;
import servicio.Entrada;
import servicio.Salida;
/**
 * Clase encargada de proporcionar el conjunto de menus y submenus principales
 *
public class Menu
{
 /**
 * Menú principal. Inicia el menú.
 */
 public static void iniciar() {
 boolean firstTime = true;
 do {
 if (!firstTime) {
 Salida.salto();
 Salida.salto();
 Salida.salto();
 Salida.mostrar(".");
 Salida.mostrar(".");
 Salida.mostrar(".");
 Entrada.getString();
 Salida.mostrar("Pulse 0 para salir y cualquier otra letra para continuar");
 Salida.salto();
 Salida.salto();
 Salida.salto();
 String salir = Entrada.getString();
 if (salir.length() == 1 && salir.charAt(0) == '0'){
 Salida.mostrar("Cerrando aplicación");
 return;
 }
 } else {
 firstTime = false;
 }
 mostrarPrincipal();
 int op = Entrada.getInt(0,14);
 switch (op) {
 case 0:
 Salida.mostrar("Vuelva pronto");
 return;
 case 1:
 gestionArtesanos();
 break;
 case 2:
 RegistroEmpleado.reponerPiezas();
 break;
 case 3:
 RegistroPedido.anotarPedido();
 break;
 case 4:
 RegistroCliente.verPresupuesto();
 break;
 case 5:
 RegistroPedido.finalizarPedido();
 break;
 case 6:
 RegistroEmpleado.asignarPresupuesto();
 break;
 case 7:
 RegistroEmpleado.notificarClienteEstado();
 break;
 case 8:
 RegistroEmpleado.verPedidosArtesano();
 break;
 case 9:
 RegistroEmpleado.terminarPedidoArtesano();
 break;
 case 10:
 RegistroEmpleado.pararPedido();
 break;
 case 11:
 gestionClientes();
 break;
 case 12:
 gestionEmpleados();
 break;
 case 13:
 gestionMuebles();
 break;
 case 14:
 gestionPedidos();
 break;
 }
 } while (true);
 }

 /**
 * Submenú de gestión de pedidos, que llama a la clase encargada de
 * obtener, modificar, insertar o eliminar datos y ofrece diferentes
 * opciones a realizar.
 */
 private static void gestionPedidos() {
 Salida.mostrar("[1] Ver el listado completo de pedidos");
 Salida.mostrar("[2] Ver los pedidos en un estado determinado");
 Salida.mostrar("[3] Buscar un pedido");
 Salida.mostrar("[4] Buscar un pedido en un estado determinado");
 Salida.mostrar("[0] Menu principal");
 int op = Entrada.getInt(0, 4);
 switch (op) {
 case 0:
 return;
 case 1:
 RegistroPedido.listarPedidos();
 break;
 case 2:
 RegistroPedido.listarPedidosEstado();
 break;
 case 3:
 RegistroPedido.buscarPedido();
 break;
 case 4:
 RegistroPedido.menuBuscarPedido();
 break;
 }
 }

 /**
 * Submenú de gestión de artesanos por parte de un jefe.
 * Ofrece diferentes opciones a realizar, entre ellas ver el progreso
 * del trabajo de un artesano o asignar trabajo a este.
 */
 private static void gestionArtesanos() {
 Salida.mostrar("[1] Asignar trabajo a un artesano");
 Salida.mostrar("[2] Ver el progreso de un artesano");
 Salida.mostrar("[0] Menu principal");
 int op = Entrada.getInt(0, 2);
 switch (op) {
 case 0:
 return;
 case 1:
 RegistroEmpleado.asignarTrabajo();
 break;
 case 2:
 RegistroEmpleado.verPedidosArtesano();
 break;
 }
 }
 /**
 * Submenú de gestión de empleados, que llama a la clase encargada de
 * obtener, modificar, insertar o eliminar datos y ofrece diferentes
 * opciones a realizar.
 */
 private static void gestionEmpleados() {
 Salida.mostrar("[1] Alta empleado");
 Salida.mostrar("[2] Eliminar empleado");
 Salida.mostrar("[3] Editar empleado");
 Salida.mostrar("[0] Menu principal");
 int op = Entrada.getInt(0, 3);
 switch (op) {
 case 0:
 return;
 case 1:
 RegistroEmpleado.altaEmpleado();
 break;
 case 2:
 RegistroEmpleado.eliminarEmpleado();
 break;
 case 3:
 RegistroEmpleado.editarEmpleado();
 break;
 }
 }

